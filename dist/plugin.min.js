"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),Parallax=function(){function e(){_classCallCheck(this,e),this.parallaxItems=document.querySelectorAll(".danzerpress-parallax"),this.navHeight=document.querySelector("header").offsetHeight,this.init()}return _createClass(e,[{key:"init",value:function(){var e=this;document.addEventListener("scroll",function(){window.requestAnimationFrame(function(){e.scrollHandler()})})}},{key:"getElementOffset",value:function(e){var t=0,n=e;do t+=n.offsetTop||0,n=n.offsetParent;while(n);return t}},{key:"scrollHandler",value:function(){var e=this;this.parallaxItems.forEach(function(t){var n=t.parentElement.classList.contains("danzerpress-title-area")?t.parentElement:t.closest("section"),r=e.getElementOffset(n),i=r+n.offsetHeight,a=0!==e.getElementOffset(t)?window.pageYOffset+e.navHeight:window.pageYOffset;a>r&&a<i?t.style.transform="translate3d(0, "+.6*(a-r)+"px, 0)":t.style.transform="translate3d(0, 0px, 0)"})}}]),e}();new Parallax;var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),Slider=function(){function e(){_classCallCheck(this,e),this.height=0,this.sliderNumber=3,this.sliderWrap=document.querySelector(".danzerpress-slider-wrap"),this.slider=document.querySelector(".danzerpress-slider"),this.slider&&(this.createPagination(),this.handleSlider())}return _createClass(e,[{key:"createPagination",value:function(){for(var e=this,t='\n            <div class="danzerpress-slider-pagination">\n                <ul>\n                </ul>\n            </div>\n        ',n=(new DOMParser).parseFromString(t,"text/html").body.firstChild,r=0;r<this.slider.children.length;r++)if(r>this.sliderNumber){var i=document.createElement("li");n.children[0].append(i),i.classList.add("active"),i.addEventListener("click",function(t){var n=document.querySelectorAll(".danzerpress-slider div.active"),r=document.querySelectorAll(".danzerpress-slider-pagination ul li");e.setActiveStuff(n),e.setActiveStuff(r),t.target.classList.add("active")})}this.sliderWrap.append(n)}},{key:"handleSlider",value:function(){for(var e=0;e<this.slider.children.length;e++){var t=this.slider.children[e],n=t.offsetHeight;n>this.height&&(this.height=n),t.style.position="absolute",t.classList.add("slider-child"),t.classList.add("active")}this.slider.style.height=this.height+"px"}},{key:"setActiveStuff",value:function(e){e&&e.forEach(function(e){e.classList.remove("active")})}}]),e}();new Slider;
//# sourceMappingURL=data:application/json;base64,
