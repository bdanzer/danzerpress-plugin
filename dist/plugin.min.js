"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),Parallax=function(){function e(){_classCallCheck(this,e),this.parallaxItems=document.querySelectorAll(".danzerpress-parallax"),this.navHeight=document.querySelector("header").offsetHeight,this.init()}return _createClass(e,[{key:"init",value:function(){var e=this;document.addEventListener("scroll",function(){window.requestAnimationFrame(function(){e.scrollHandler()})})}},{key:"getElementOffset",value:function(e){var t=0,r=e;do t+=r.offsetTop||0,r=r.offsetParent;while(r);return t}},{key:"scrollHandler",value:function(){var e=this;this.parallaxItems.forEach(function(t){var r=t.parentElement,n=e.getElementOffset(r),i=n+r.offsetHeight,a=0!==e.getElementOffset(t)?window.pageYOffset+e.navHeight:window.pageYOffset;a>n&&a<i?t.style.transform="translate3d(0, "+.6*(a-n)+"px, 0)":t.style.transform="translate3d(0, 0px, 0)"})}}]),e}();new Parallax;var _createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),Slider=function(){function e(){_classCallCheck(this,e),this.height=0,this.sliderNumber=3,this.sliderWrap=document.querySelector(".danzerpress-slider-wrap"),this.slider=document.querySelector(".danzerpress-slider"),this.slider&&(this.createPagination(),this.handleSlider())}return _createClass(e,[{key:"createPagination",value:function(){for(var e=this,t='\n            <div class="danzerpress-slider-pagination">\n                <ul>\n                </ul>\n            </div>\n        ',r=(new DOMParser).parseFromString(t,"text/html").body.firstChild,n=0;n<this.slider.children.length;n++)if(n>this.sliderNumber){var i=document.createElement("li");r.children[0].append(i),i.classList.add("active"),i.addEventListener("click",function(t){var r=document.querySelectorAll(".danzerpress-slider div.active"),n=document.querySelectorAll(".danzerpress-slider-pagination ul li");e.setActiveStuff(r),e.setActiveStuff(n),t.target.classList.add("active")})}this.sliderWrap.append(r)}},{key:"handleSlider",value:function(){for(var e=0;e<this.slider.children.length;e++){var t=this.slider.children[e],r=t.offsetHeight;r>this.height&&(this.height=r),t.style.position="absolute",t.classList.add("slider-child"),t.classList.add("active")}this.slider.style.height=this.height+"px"}},{key:"setActiveStuff",value:function(e){e&&e.forEach(function(e){e.classList.remove("active")})}}]),e}();new Slider;
//# sourceMappingURL=data:application/json;base64,
