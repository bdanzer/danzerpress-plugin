/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./resources/js/entry.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/js/entry.js":
/*!*******************************!*\
  !*** ./resources/js/entry.js ***!
  \*******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _sass_plugin_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../sass/plugin.scss */ "./resources/sass/plugin.scss");
/* harmony import */ var _sass_plugin_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_sass_plugin_scss__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _parallax_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parallax.js */ "./resources/js/parallax.js");
/* harmony import */ var _parallax_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_parallax_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _plugin_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./plugin.js */ "./resources/js/plugin.js");
/* harmony import */ var _plugin_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_plugin_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _slider_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./slider.js */ "./resources/js/slider.js");
/* harmony import */ var _slider_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_slider_js__WEBPACK_IMPORTED_MODULE_3__);





/***/ }),

/***/ "./resources/js/parallax.js":
/*!**********************************!*\
  !*** ./resources/js/parallax.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Parallax =
/*#__PURE__*/
function () {
  function Parallax() {
    _classCallCheck(this, Parallax);

    this.parallaxItems = document.querySelectorAll('.danzerpress-parallax');
    this.navHeight = document.querySelector('header').offsetHeight;
    this.init();
  }

  _createClass(Parallax, [{
    key: "init",
    value: function init() {
      var _this = this;

      document.addEventListener('scroll', function () {
        window.requestAnimationFrame(function () {
          _this.scrollHandler();
        });
      });
    }
  }, {
    key: "getElementOffset",
    value: function getElementOffset(el) {
      var top = 0;
      var element = el; // Loop through the DOM tree
      // and add it's parent's offset to get page offset

      do {
        top += element.offsetTop || 0;
        element = element.offsetParent;
      } while (element);

      return top;
    }
  }, {
    key: "scrollHandler",
    value: function scrollHandler() {
      var _this2 = this;

      this.parallaxItems.forEach(function (parallaxItem) {
        var sectionParent = parallaxItem.parentElement.classList.contains('danzerpress-title-area') ? parallaxItem.parentElement : parallaxItem.closest('section'),
            sectionParentTop = _this2.getElementOffset(sectionParent),
            parentOffsetBottom = sectionParentTop + sectionParent.offsetHeight,
            windowHeightNav = _this2.getElementOffset(parallaxItem) !== 0 ? window.pageYOffset + _this2.navHeight : window.pageYOffset;

        if (windowHeightNav > sectionParentTop && windowHeightNav < parentOffsetBottom) {
          parallaxItem.style.transform = 'translate3d(0, ' + (windowHeightNav - sectionParentTop) * .6 + 'px, 0)';
        } else {
          parallaxItem.style.transform = 'translate3d(0, 0px, 0)';
        }
      });
    }
  }]);

  return Parallax;
}();

new Parallax();

/***/ }),

/***/ "./resources/js/plugin.js":
/*!********************************!*\
  !*** ./resources/js/plugin.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./resources/js/slider.js":
/*!********************************!*\
  !*** ./resources/js/slider.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Slider =
/*#__PURE__*/
function () {
  function Slider() {
    _classCallCheck(this, Slider);

    this.height = 0;
    this.sliderNumber = 3;
    this.sliderWrap = document.querySelector('.danzerpress-slider-wrap');
    this.slider = document.querySelector('.danzerpress-slider');

    if (!this.slider) {
      return;
    }

    this.createPagination();
    this.handleSlider();
  }

  _createClass(Slider, [{
    key: "createPagination",
    value: function createPagination() {
      var _this = this;

      var sliderPagination = "\n            <div class=\"danzerpress-slider-pagination\">\n                <ul>\n                </ul>\n            </div>\n        ";
      var doc = new DOMParser().parseFromString(sliderPagination, 'text/html').body.firstChild;

      for (var i = 0; i < this.slider.children.length; i++) {
        if (i > this.sliderNumber) {
          var button = document.createElement('li');
          doc.children[0].append(button);
          button.classList.add('active');
          button.addEventListener('click', function (e) {
            var activeDiv = document.querySelectorAll('.danzerpress-slider div.active');
            var activeLi = document.querySelectorAll('.danzerpress-slider-pagination ul li');

            _this.setActiveStuff(activeDiv);

            _this.setActiveStuff(activeLi);

            e.target.classList.add('active');
          });
        }
      }

      this.sliderWrap.append(doc);
    }
  }, {
    key: "handleSlider",
    value: function handleSlider() {
      for (var i = 0; i < this.slider.children.length; i++) {
        var child = this.slider.children[i];
        var itemHeight = child.offsetHeight;

        if (itemHeight > this.height) {
          this.height = itemHeight;
        }

        child.style.position = 'absolute';
        child.classList.add('slider-child');
        child.classList.add('active');
      }

      this.slider.style.height = this.height + 'px';
    }
  }, {
    key: "setActiveStuff",
    value: function setActiveStuff(thing) {
      if (thing) {
        thing.forEach(function (div) {
          div.classList.remove('active');
        });
      }
    }
  }]);

  return Slider;
}();

new Slider();

/***/ }),

/***/ "./resources/sass/plugin.scss":
/*!************************************!*\
  !*** ./resources/sass/plugin.scss ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,